on: [push, pull_request, release]
name: Pipeline
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Install Go
      uses: actions/setup-go@v1
      with:
        go-version: 1.13.x
    - name: Import GPG key
      id: import_gpg
      uses: crazy-max/ghaction-import-gpg@v3
      with:
        gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.GPG_PASSPHRASE }}
    - name: Build
      run: |
        VERSION=$(git describe --tags --always | sed 's#^v##')
        GOOS=linux   GOARCH=amd64 go build -v -o protoc-${VERSION}-linux-x86_64.exe
        GOOS=linux   GOARCH=386   go build -v -o protoc-${VERSION}-linux-x86_32.exe
        GOOS=linux   GOARCH=arm64 go build -v -o protoc-${VERSION}-linux-aarch_64.exe
        GOOS=darwin  GOARCH=amd64 go build -v -o protoc-${VERSION}-osx-x86_64.exe
        GOOS=windows GOARCH=amd64 go build -v -o protoc-${VERSION}-windows-x86_64.exe
        GOOS=windows GOARCH=386   go build -v -o protoc-${VERSION}-windows-x86_32.exe
        ls -l *.exe
    - name: Test
      run: go test ./...
    - name: Sign and upload Maven artifacts
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        VERSION=$(git describe --tags --always | sed 's#^v##')
        MAVEN='https://oss.sonatype.org/service/local/staging/deploy/maven2'
        MAVEN_AUTH='${{ secrets.sonatype_username }}:${{ secrets.sonatype_password }}'
        GPG_KEY_ID='${{ steps.import_gpg.outputs.keyid }}'
        GPG_PASSPHRASE='${{ secrets.GPG_PASSPHRASE }}'

        cat > pom.xml << EOF
          <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
          <modelVersion>4.0.0</modelVersion>
          <groupId>com.sixt.protobuf</groupId>
          <artifactId>protoc</artifactId>
          <version>${VERSION}</version>
          </project>
        EOF

        FILES=(pom.xml protoc-${VERSION}-linux-x86_64.exe protoc-${VERSION}-linux-x86_32.exe protoc-${VERSION}-linux-aarch_64.exe protoc-${VERSION}-osx-x86_64.exe protoc-${VERSION}-windows-x86_64.exe protoc-${VERSION}-windows-x86_32.exe)

        # generate sha512
        for f in "${FILES[@]}"; do sha512sum $f > $f.sha512; done;

        # sign files
        for f in "${FILES[@]}"; do gpg --local-user $GPG_KEY_ID --batch --yes --passphrase=GPG_PASSPHRASE --yes --pinentry-mode loopback -ab $f; done;

        # upload checksums
        for f in "${FILES[@]}"; do curl -X PUT -u "$MAVEN_AUTH" "$MAVEN/com/sixt/protobuf/protoc/${VERSION}/${f}.sha512" --upload-file "${f}.sha512"; done;

        # upload signed files
        for f in "${FILES[@]}"; do curl -X PUT -u "$MAVEN_AUTH" "$MAVEN/com/sixt/protobuf/protoc/${VERSION}/${f}.asc" --upload-file "${f}.asc"; done;

        # upload executables
        for f in "${FILES[@]}"; do curl -X PUT -u "$MAVEN_AUTH" "$MAVEN/com/sixt/protobuf/protoc/${VERSION}/$f" --upload-file "$f"; done;
